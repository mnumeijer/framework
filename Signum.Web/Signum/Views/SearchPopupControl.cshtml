@model Context
@{  FindOptions findOptions = (FindOptions)ViewData[ViewDataKeys.FindOptions];}
<div id="@Model.Compose("panelPopup")" class="sf-search-popup modal fade" tabindex="-1" role="dialog" aria-labelledby="XXXX" data-prefix="@Model.Prefix">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                @if (!ViewData[ViewDataKeys.FindMode].Equals(FindMode.Find))
                {
                    <button type="button" class="close sf-close-button">×</button>
                }
                else
                {
                    <div style="float: right">
                        <div class="btn-group">
                            <button id="@Model.Compose("btnOk")" class="btn btn-primary sf-entity-button sf-close-button sf-ok-button">@JavascriptMessage.ok.NiceToString()</button>
                        </div>
                        <div class="btn-group">
                            <button id="@Model.Compose("btnCancel")" class="btn btn-default sf-entity-button sf-close-button sf-cancel-button">@JavascriptMessage.cancel.NiceToString()</button>
                        </div>
                    </div>
                }
                <h4>
                    <span class="sf-entity-title">@ViewBag.Title</span>
                    <a id="@Model.Compose("sfFullScreen")" class="sf-popup-fullscreen" href="#">
                        <span class="glyphicon glyphicon-new-window"></span>
                    </a>
                </h4>

            </div>

            <div class="modal-body">
                @{ 
                    ViewData[ViewDataKeys.InPopup] = true;
                    ViewData[ViewDataKeys.AvoidFullScreenButton] = true;
                    Html.RenderPartial(Finder.Manager.SearchControlView, Model);
                }
                @Html.ValidationSummaryAjax(Model)
            </div>
        </div>
    </div>
</div>
