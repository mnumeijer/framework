using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Signum.Utilities;
using System.Web.Hosting;
using System.Globalization;
using System.Text;
using System.Collections;
using System.Resources;
using System.Collections.Concurrent;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using Signum.Entities;

namespace Signum.Web.PortableAreas
{
    public class CalendarLocalizedJavaScriptRepository : IFileRepository
    {
        public readonly string VirtualPathPrefix;
        
        readonly ConcurrentDictionary<CultureInfo, StaticContentResult> cachedFiles = new ConcurrentDictionary<CultureInfo, StaticContentResult>();

        public CalendarLocalizedJavaScriptRepository(string virtualPathPrefix)
        {
            if (string.IsNullOrEmpty(virtualPathPrefix))
                throw new ArgumentNullException("virtualPath");

            this.VirtualPathPrefix = virtualPathPrefix.ToLower();
        }

        public ActionResult GetFile(string file)
        {
            CultureInfo culture = GetCultureInfo(file);

            if (culture == null)
                return null;

            return this.cachedFiles.GetOrAdd(culture, ci => new StaticContentResult(CreateFile(ci), file));
        }

        byte[] CreateFile(CultureInfo ci)
        {
            using(CultureInfoUtils.ChangeBothCultures(ci))
            using (MemoryStream ms = new MemoryStream())
            {
                using (StreamWriter sw = new StreamWriter(ms, Encoding.UTF8))
                {
                    var config = new
                    {
                        days = CultureInfo.CurrentCulture.DateTimeFormat.DayNames,
                        daysShort = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames,
                        daysMin = CultureInfo.CurrentCulture.DateTimeFormat.ShortestDayNames,
                        months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames,
                        monthsShort = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames,

                        today = CalendarMessage.Today.NiceToString(),
                    };

                    sw.WriteLine("//Autogenerated {0} translation for bootstrap-datepicker".FormatWith(ci.EnglishName));
                    sw.WriteLine(";(function($){");
                    sw.WriteLine("	$.fn.datepicker.dates['{0}'] = {1};", ci.TwoLetterISOLanguageName, Newtonsoft.Json.JsonConvert.SerializeObject(config));
                    sw.WriteLine("}(jQuery));");
                }

                return ms.ToArray();
            }
        }
    
        public bool FileExists(string file)
        {
            return GetCultureInfo(file) != null;
        }

        CultureInfo GetCultureInfo(string virtualPath)
        {
            if (!virtualPath.StartsWith(VirtualPathPrefix, StringComparison.InvariantCultureIgnoreCase))
                return null;

            var fileName = virtualPath.Substring(VirtualPathPrefix.Length);

            if (Path.GetExtension(fileName) != ".js")
                return null;

            try
            {
                return CultureInfo.GetCultureInfo(Path.GetFileNameWithoutExtension(fileName));
            }
            catch (CultureNotFoundException)
            {
                return null;
            }
        }

        public override string ToString()
        {
            return "CalendarLocalizedJavaScript {0}".FormatWith(VirtualPathPrefix);
        }
    }
}